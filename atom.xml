<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到lionsom的blog</title>
  
  <subtitle>人生苦短，天马行空！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-21T07:33:17.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lionsom</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac安装CocoaPods详解</title>
    <link href="http://yoursite.com/2018/03/21/Mac%E5%AE%89%E8%A3%85CocoaPods%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/03/21/Mac安装CocoaPods详解/</id>
    <published>2018-03-21T03:57:04.000Z</published>
    <updated>2018-03-21T07:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p>Ruby环境的安装</p><ul><li>安装系统需要的包</li><li>Homebrew安装</li><li>安装RVM</li><li>使用RVM安装Ruby环境</li><li>设置 Ruby 版本</li><li>替换Ruby源为taobao.org</li></ul></li><li><p>安装CocoaPods</p><ul><li>CocoaPods是什么？</li><li>直接安装CocoaPods</li></ul></li></ul><a id="more"></a><h2 id="一、Ruby环境的安装"><a href="#一、Ruby环境的安装" class="headerlink" title="一、Ruby环境的安装"></a>一、Ruby环境的安装</h2><h3 id="1-1、安装系统需要的包"><a href="#1-1、安装系统需要的包" class="headerlink" title="1.1、安装系统需要的包"></a>1.1、安装系统需要的包</h3><blockquote><p>先安装 <a href="http://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a> 开发工具，它将帮你安装好 Unix 环境需要的开发包</p></blockquote><h3 id="1-2、Homebrew安装"><a href="#1-2、Homebrew安装" class="headerlink" title="1.2、Homebrew安装"></a>1.2、Homebrew安装</h3><h4 id="1-2-1、Homebrew是神马"><a href="#1-2-1、Homebrew是神马" class="headerlink" title="1.2.1、Homebrew是神马"></a>1.2.1、Homebrew是神马</h4><blockquote><p>linux系统有个让人蛋疼的通病，软件包依赖，好在当前主流的两大发行版本都自带了解决方案，Red hat有yum，Ubuntu有apt-get神马，你用mac os，不好意Mac os木有类似的东东，泪奔中几经折腾总算找到了第三方支持：Homebrew，Homebrew简称brew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，可以说Homebrew就是mac下的apt-get、yum神器</p></blockquote><h4 id="1-2-2、是否已安装Homebrew"><a href="#1-2-2、是否已安装Homebrew" class="headerlink" title="1.2.2、是否已安装Homebrew"></a>1.2.2、是否已安装Homebrew</h4><ul><li><strong>brew search rabbitmq</strong>，能搜索到则证明已安装。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LionsomMBP:~ lionsom$ brew search rabbitmq</span><br><span class="line">==&gt; Searching local taps...</span><br><span class="line">rabbitmq                                 rabbitmq-c</span><br><span class="line">==&gt; Searching taps on GitHub...</span><br><span class="line">caskroom/cask/rabbitmq-app</span><br><span class="line">==&gt; Searching blacklisted, migrated and deleted formulae...</span><br></pre></td></tr></table></figure><h4 id="1-2-3、安装Homebrew"><a href="#1-2-3、安装Homebrew" class="headerlink" title="1.2.3、安装Homebrew"></a>1.2.3、安装Homebrew</h4><p>安装 Homebrew<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></p><p>将以上命令粘贴至终端。</p><h4 id="1-2-4、更多详情，请前往Homebrew官网查看"><a href="#1-2-4、更多详情，请前往Homebrew官网查看" class="headerlink" title="1.2.4、更多详情，请前往Homebrew官网查看"></a>1.2.4、更多详情，请前往<a href="https://brew.sh" target="_blank" rel="noopener">Homebrew官网</a>查看</h4><h3 id="1-3、安装RVM"><a href="#1-3、安装RVM" class="headerlink" title="1.3、安装RVM"></a>1.3、安装RVM</h3><h4 id="1-3-1、RVM是什么？"><a href="#1-3-1、RVM是什么？" class="headerlink" title="1.3.1、RVM是什么？"></a>1.3.1、RVM是什么？</h4><blockquote><p>Ruby Version Manager简称RVM,是一款非常好用的ruby版本管理以及安装工具。</p></blockquote><h4 id="1-3-2、具体安装步骤"><a href="#1-3-2、具体安装步骤" class="headerlink" title="1.3.2、具体安装步骤"></a>1.3.2、具体安装步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>期间可能会问你sudo管理员密码，以及自动通过homebrew安装依赖包，等待一段时间后就可以成功安装好 RVM。</p><p>然后，载入 RVM 环境（新开 Termal 就不用这么做了，会自动重新载入的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure><p>检查一下是否安装正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rvm -v</span><br><span class="line"></span><br><span class="line">rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]</span><br></pre></td></tr></table></figure><h3 id="1-4、使用RVM安装Ruby环境"><a href="#1-4、使用RVM安装Ruby环境" class="headerlink" title="1.4、使用RVM安装Ruby环境"></a>1.4、使用RVM安装Ruby环境</h3><p>列出已知的ruby版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm list known</span><br></pre></td></tr></table></figure><p>可以选择现有的rvm版本来进行安装（下面以rvm 2.4版本的安装为例）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm install 2.4</span><br></pre></td></tr></table></figure><p>同样继续等待漫长的下载，编译过程，完成以后，Ruby, Ruby Gems 就安装好了。</p><p><strong>如果Honebrew没有安装，则在此过程中会进行自动安装。</strong></p><ul><li><p>查看是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v</span><br></pre></td></tr></table></figure></li><li><p>查询已经安装的ruby</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm list</span><br></pre></td></tr></table></figure></li><li><p>卸载一个已安装版本 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm remove 1.9.2</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-5、设置-Ruby-版本"><a href="#1-5、设置-Ruby-版本" class="headerlink" title="1.5、设置 Ruby 版本"></a>1.5、设置 Ruby 版本</h3><p>RVM 装好以后，需要执行下面的命令将指定版本的 Ruby 设置为系统默认版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm 2.4.1 --default</span><br></pre></td></tr></table></figure><p>同样，也可以用其他版本号，前提是你有用 rvm install 安装过那个版本</p><p>这个时候你可以测试是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v</span><br><span class="line"></span><br><span class="line">ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin17]</span><br></pre></td></tr></table></figure><h3 id="1-6、替换Ruby源为taobao-org"><a href="#1-6、替换Ruby源为taobao-org" class="headerlink" title="1.6、替换Ruby源为taobao.org"></a>1.6、替换Ruby源为taobao.org</h3><blockquote><p>因为Ruby的默认源使用的是cocoapods.org，国内访问这个网址有时候会有问题，一种解决方案是将远替换成淘宝的，替换方式如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem source -r https://rubygems.org/</span><br><span class="line">$ gem source -a https://ruby.taobao.org</span><br></pre></td></tr></table></figure><p>要想验证是否替换成功了，可以执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -l</span><br></pre></td></tr></table></figure><p>正常的输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org</span><br></pre></td></tr></table></figure><p>到这里就已经把Ruby环境成功的安装到了Mac OS X上，接下来就可以进行相应的开发使用了。</p><h2 id="2、安装CocoaPods"><a href="#2、安装CocoaPods" class="headerlink" title="2、安装CocoaPods"></a>2、安装CocoaPods</h2><h3 id="2-1、CocoaPods是什么？"><a href="#2-1、CocoaPods是什么？" class="headerlink" title="2.1、CocoaPods是什么？"></a>2.1、CocoaPods是什么？</h3><blockquote><p>当你开发iOS应用时，会经常使用到很多第三方开源类库，比如JSONKit，AFNetWorking等等。可能某个类库又用到其他类库，所以要使用它，必须得另外下载其他类库，而其他类库又用到其他类库，“子子孙孙无穷尽也”，这也许是比较特殊的情况。总之小编的意思就是，手动一个个去下载所需类库十分麻烦。另外一种常见情况是，你项目中用到的类库有更新，你必须得重新下载新版本，重新加入到项目中，十分麻烦。如果能有什么工具能解决这些恼人的问题，那将“善莫大焉”。所以，你需要 CocoaPods。</p><p>CocoaPods应该是iOS最常用最有名的类库管理工具了，上述两个烦人的问题，通过cocoaPods，只需要一行命令就可以完全解决，当然前提是你必须正确设置它。重要的是，绝大部分有名的开源类库，都支持CocoaPods。所以，作为iOS程序员的我们，掌握CocoaPods的使用是必不可少的基本技能了。</p></blockquote><h3 id="2-2、直接安装CocoaPods"><a href="#2-2、直接安装CocoaPods" class="headerlink" title="2.2、直接安装CocoaPods"></a>2.2、直接安装CocoaPods</h3><p>直接在终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>等待一小段时间，安装完成！！</p><p>验证是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod --version</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod search AFNetworking</span><br></pre></td></tr></table></figure><hr><blockquote><h4 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h4><p><strong>欢迎指正补充，可联系<a href="lionsom_lin@qq.com">lionsom_lin@qq.com</a></strong><br><strong>原文地址：<a href="http://lionsom.com/2018/03/21/Mac安装CocoaPods详解/" target="_blank" rel="noopener">Mac安装CocoaPods详解</a></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ruby环境的安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装系统需要的包&lt;/li&gt;
&lt;li&gt;Homebrew安装&lt;/li&gt;
&lt;li&gt;安装RVM&lt;/li&gt;
&lt;li&gt;使用RVM安装Ruby环境&lt;/li&gt;
&lt;li&gt;设置 Ruby 版本&lt;/li&gt;
&lt;li&gt;替换Ruby源为taobao.org&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装CocoaPods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CocoaPods是什么？&lt;/li&gt;
&lt;li&gt;直接安装CocoaPods&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CocoaPods相关" scheme="http://yoursite.com/categories/CocoaPods%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="pods" scheme="http://yoursite.com/tags/pods/"/>
    
  </entry>
  
  <entry>
    <title>避免程序崩溃iOS探索</title>
    <link href="http://yoursite.com/2018/03/20/%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83iOS%E6%8E%A2%E7%B4%A2/"/>
    <id>http://yoursite.com/2018/03/20/避免程序崩溃iOS探索/</id>
    <published>2018-03-20T04:45:13.000Z</published>
    <updated>2018-03-21T07:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>Part ONE - 崩溃发生前之数据<code>&lt;null&gt;</code>处理</li><li>Part Two - 崩溃发生时Runtime避免崩溃</li><li>Part Three - 崩溃发生后Bug收集处理</li></ul><a id="more"></a><hr><h1 id="Part-ONE-崩溃发生前之数据-lt-null-gt-处理"><a href="#Part-ONE-崩溃发生前之数据-lt-null-gt-处理" class="headerlink" title="Part ONE - 崩溃发生前之数据&lt;null&gt;处理"></a>Part ONE - 崩溃发生前之数据<code>&lt;null&gt;</code>处理</h1><hr><h3 id="文件参考："><a href="#文件参考：" class="headerlink" title="文件参考："></a>文件参考：</h3><ul><li><a href="https://my.oschina.net/iq19900204/blog/408034" target="_blank" rel="noopener">ios中json解析出现的null问题</a></li><li><a href="https://github.com/nicklockwood/NullSafe" target="_blank" rel="noopener">GitHub-NullSafe</a></li></ul><h2 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h2><p>客户端与服务器之间的数据请求一般以Json形式传递，正常有null值。<br>这个数据类型不是nil 也不是 String。 解析成对象之后，如果直接向这个对象发送消息（eg：length，count 等等）就会直接崩溃。提示错误为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-[NSNull length]: unrecognized selector sent to instance 0x388a4a70</span><br></pre></td></tr></table></figure><h2 id="二、实战场景"><a href="#二、实战场景" class="headerlink" title="二、实战场景"></a>二、实战场景</h2><p><img src="http://upload-images.jianshu.io/upload_images/1859399-edc665b555034e8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据为null"></p><p><img src="http://upload-images.jianshu.io/upload_images/1859399-607940347ffad313.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="调用.length操作"></p><p><img src="http://upload-images.jianshu.io/upload_images/1859399-b2bbcc0a311d32dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="崩溃。。。"></p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h4 id="方案一：解析后进行判断"><a href="#方案一：解析后进行判断" class="headerlink" title="方案一：解析后进行判断"></a>方案一：解析后进行判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line">if( [m isEqual:[NSNull null]] )</span><br><span class="line">&#123; </span><br><span class="line">    NSLog(@&quot;&lt;null&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//方法二</span><br><span class="line">if ( ![isKindOfClass:[NSNull class]] )</span><br><span class="line">&#123;</span><br><span class="line">    // 操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案二：AFN"><a href="#方案二：AFN" class="headerlink" title="方案二：AFN"></a>方案二：AFN</h4><p>如果你使用AFNetwork 这个库做网络请求的话，可以用以下代码，自动帮你去掉这个讨厌的空值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removesKeysWithNullValues = YES</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_dataSessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:baseUrl]];</span><br><span class="line">[_dataSessionManager setRequestSerializer:[AFJSONRequestSerializer serializer]];  //告诉AFN使用JSON格式，AFN内部会自动转JSON</span><br><span class="line"></span><br><span class="line">AFJSONResponseSerializer * response = [AFJSONResponseSerializer serializer];</span><br><span class="line">response.removesKeysWithNullValues = YES;</span><br><span class="line">    </span><br><span class="line">[_dataSessionManager setResponseSerializer:response];  //以JSON格式返回</span><br><span class="line">_dataSessionManager.requestSerializer.timeoutInterval = 10;</span><br></pre></td></tr></table></figure><h4 id="方案三：利用Category将nil转为-””"><a href="#方案三：利用Category将nil转为-””" class="headerlink" title="方案三：利用Category将nil转为@””"></a>方案三：利用Category将nil转为@””</h4><p><img src="http://upload-images.jianshu.io/upload_images/1859399-9aef960978c3970c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用案例"></p><p><strong>代码如下 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface NSDictionary (DeleteNull)</span><br><span class="line"></span><br><span class="line">+(id)changeType:(id)myObj;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  NSDictionary+DeleteNull.m</span><br><span class="line">//  PAL-iOS</span><br><span class="line">//</span><br><span class="line">//  Created by linxiang on 2017/11/1.</span><br><span class="line">//  Copyright © 2017年 minxing. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;NSDictionary+DeleteNull.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation NSDictionary (DeleteNull)</span><br><span class="line"></span><br><span class="line">#pragma mark - 私有方法</span><br><span class="line">//将NSDictionary中的Null类型的项目转化成@&quot;&quot;</span><br><span class="line">+(NSDictionary *)nullDic:(NSDictionary *)myDic</span><br><span class="line">&#123;</span><br><span class="line">    NSArray *keyArr = [myDic allKeys];</span><br><span class="line">    NSMutableDictionary *resDic = [[NSMutableDictionary alloc]init];</span><br><span class="line">    for (int i = 0; i &lt; keyArr.count; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        id obj = [myDic objectForKey:keyArr[i]];</span><br><span class="line">        </span><br><span class="line">        obj = [self changeType:obj];</span><br><span class="line">        </span><br><span class="line">        [resDic setObject:obj forKey:keyArr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    return resDic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将NSArray中的Null类型的项目转化成@&quot;&quot;</span><br><span class="line">+(NSArray *)nullArr:(NSArray *)myArr</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableArray *resArr = [[NSMutableArray alloc] init];</span><br><span class="line">    for (int i = 0; i &lt; myArr.count; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        id obj = myArr[i];</span><br><span class="line">        </span><br><span class="line">        obj = [self changeType:obj];</span><br><span class="line">        </span><br><span class="line">        [resArr addObject:obj];</span><br><span class="line">    &#125;</span><br><span class="line">    return resArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将NSString类型的原路返回</span><br><span class="line">+(NSString *)stringToString:(NSString *)string</span><br><span class="line">&#123;</span><br><span class="line">    return string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将Null类型的项目转化成@&quot;&quot;</span><br><span class="line">+(NSString *)nullToString</span><br><span class="line">&#123;</span><br><span class="line">    return @&quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 公有方法</span><br><span class="line">//类型识别:将所有的NSNull类型转化成@&quot;&quot;</span><br><span class="line">+(id)changeType:(id)myObj</span><br><span class="line">&#123;</span><br><span class="line">    if ([myObj isKindOfClass:[NSDictionary class]])</span><br><span class="line">    &#123;</span><br><span class="line">        return [self nullDic:myObj];</span><br><span class="line">    &#125;</span><br><span class="line">    else if([myObj isKindOfClass:[NSArray class]])</span><br><span class="line">    &#123;</span><br><span class="line">        return [self nullArr:myObj];</span><br><span class="line">    &#125;</span><br><span class="line">    else if([myObj isKindOfClass:[NSString class]])</span><br><span class="line">    &#123;</span><br><span class="line">        return [self stringToString:myObj];</span><br><span class="line">    &#125;</span><br><span class="line">    else if([myObj isKindOfClass:[NSNull class]])</span><br><span class="line">    &#123;</span><br><span class="line">        return [self nullToString];</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return myObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="方案四：NullSafe"><a href="#方案四：NullSafe" class="headerlink" title="方案四：NullSafe"></a>方案四：NullSafe</h4><h5 id="4-1、NullSafe简介"><a href="#4-1、NullSafe简介" class="headerlink" title="4.1、NullSafe简介"></a>4.1、NullSafe简介</h5><p>NullSafe是一个Category，在运行时操作，把这个讨厌的空值置为nil，而nil是安全的，可以向nil对象发送任何message而不会奔溃。这个category使用起来非常方便，只要加入到了工程中就可以了，你其他的什么都不用做，对，就是这么简单。详细的请去Github上查看：<br><a href="https://github.com/nicklockwood/NullSafe" target="_blank" rel="noopener">NullSafe</a></p><h5 id="4-2、NullSafe使用"><a href="#4-2、NullSafe使用" class="headerlink" title="4.2、NullSafe使用"></a>4.2、NullSafe使用</h5><p>使用时只需要把 <code>NullSafe.m</code> 文件拖进工程就可以了，它在程序运行时自动加载，你不需要再导入其他头文件了。</p><p>　　如果想要禁止 <code>NullSafe</code> 的话，需要设置：<code>NULLSAFE_ENABLED=0</code>，或者在 <code>.pch 文件</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ifdef DEBUG</span><br><span class="line">#define NULLSAFE_ENABLED 0</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h5 id="4-3、NullSafe原理"><a href="#4-3、NullSafe原理" class="headerlink" title="4.3、NullSafe原理"></a>4.3、NullSafe原理</h5><p><a href="https://www.2cto.com/kf/201710/690327.html" target="_blank" rel="noopener">iOS开发技巧之NullSafe原理分析</a></p><p>简单点说,当我们给一个<code>NSNull</code>对象发送消息的话，可能会崩溃<code>（null是有内存的）</code>，而发送给<code>nil</code>的话，是不会崩溃的。<br>作者就是使用了这么一个原理，把发送给<code>NSNull</code>的而<code>NSNull</code>又无法处理的消息经过如下几步处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.创建一个方法缓存，这个缓存会缓存项目中类的所有类名。</span><br><span class="line">2.遍历缓存，寻找是否已经有可以执行此方法的类。</span><br><span class="line">3.如果有的话，返回这个 NSMethodSignature 。</span><br><span class="line">4.如果没有的话，返回 nil ,接下来会走 forwardInvocation: 方法。</span><br><span class="line">5.[invocation invokeWithTarget:nil]; 将消息转发给 nil。</span><br></pre></td></tr></table></figure><p>那么，如何判断 <code>NSNull</code> 无法处理这个消息呢，在OC中，系统如果对某个实例发送消息之后，它（及其父类）无法处理（比如，没有这个方法等），系统就会发送 <code>methodSignatureForSelector</code> 消息，如果这个方法返回非空，那么就去执行返回的方法，如果为nil,则发送 <code>forwardInvocation</code> 消息。</p><p>这样就完成整个转发链了。</p><hr><h1 id="Part-TWO-崩溃发生时Runtime避免崩溃"><a href="#Part-TWO-崩溃发生时Runtime避免崩溃" class="headerlink" title="Part TWO - 崩溃发生时Runtime避免崩溃"></a>Part TWO - 崩溃发生时Runtime避免崩溃</h1><hr><h2 id="一、AvoidCrash"><a href="#一、AvoidCrash" class="headerlink" title="一、AvoidCrash"></a>一、AvoidCrash</h2><h3 id="1-1、AvoidCrash参考文档"><a href="#1-1、AvoidCrash参考文档" class="headerlink" title="1.1、AvoidCrash参考文档"></a>1.1、AvoidCrash参考文档</h3><p><a href="https://www.jianshu.com/p/5d625f86bd02" target="_blank" rel="noopener">iOS runtime实用篇–和常见崩溃say good-bye！</a><br>—<a href="https://github.com/chenfanfang/AvoidCrash" target="_blank" rel="noopener">AvoidCrash</a></p><h3 id="1-2、AvoidCrash与Bugly、友盟等三方冲突吗？"><a href="#1-2、AvoidCrash与Bugly、友盟等三方冲突吗？" class="headerlink" title="1.2、AvoidCrash与Bugly、友盟等三方冲突吗？"></a>1.2、AvoidCrash与Bugly、友盟等三方冲突吗？</h3><p><a href="https://www.jianshu.com/p/2b90aa96c0a0" target="_blank" rel="noopener">AvoidCrash的集成注意事项、疑惑的解答</a></p><blockquote><p>1、若集成了腾讯Bugly或者友盟等等异常搜集的SDK,AvoidCrash会影响到它们的异常搜集吗？</p></blockquote><p>首先要清楚的一点是，对于一些第三方crash信息搜集工具，比如Bugly或者友盟，它们只有当程序出现异常(崩溃)的时候才会搜集异常信息。而AvoidCrash的作用是，防止部分常见异常的发生，异常被AvoidCrash捕获了，程序就不会崩溃，第三方crash信息搜集工具就不会搜集到崩溃信息咯。</p><blockquote><p>2、如何处理才能既防止崩溃，又搜集到崩溃信息</p></blockquote><p>AvoidCrash若捕获到异常，将会发出一个通知:AvoidCrashNotification,监听该通知即可获取到原本将导致崩溃的具体信息。此时你可以利用Bugly的自定义异常接口将这些异常信息上传到Bugly。</p><h3 id="1-3、AvoidCrash分析"><a href="#1-3、AvoidCrash分析" class="headerlink" title="1.3、AvoidCrash分析"></a>1.3、AvoidCrash分析</h3><h5 id="1-3-1、不添加AvoidCrash情况下"><a href="#1-3-1、不添加AvoidCrash情况下" class="headerlink" title="1.3.1、不添加AvoidCrash情况下"></a>1.3.1、不添加AvoidCrash情况下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSString *nilStr = nil;</span><br><span class="line">NSArray *array = @[@&quot;lionsom&quot;, nilStr, @&quot;哈哈哈哈&quot;];</span><br><span class="line">NSLog(@&quot;%@&quot;,array);</span><br></pre></td></tr></table></figure><p><strong>出现崩溃</strong><br><img src="http://p5vr8lvt8.bkt.clouddn.com/myblog_avoidCrash_001.jpg" alt="崩溃"></p><h5 id="1-3-2、添加AvoidCrash后"><a href="#1-3-2、添加AvoidCrash后" class="headerlink" title="1.3.2、添加AvoidCrash后"></a>1.3.2、添加AvoidCrash后</h5><ul><li>先交换初始化NSArray方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//instance array method exchange</span><br><span class="line">[AvoidCrash exchangeClassMethod:[self class]    </span><br><span class="line">                     method1Sel:@selector(arrayWithObjects:count:) </span><br><span class="line">                     method2Sel:@selector(AvoidCrashArrayWithObjects:count:)];</span><br></pre></td></tr></table></figure><ul><li>在我们自定义的<code>AvoidCrashArrayWithObjects:count:</code>方法中进行异常捕捉（此处涉及<code>@Try Catch</code> 和 <code>NSException</code>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)AvoidCrashArrayWithObjects:(const id  _Nonnull __unsafe_unretained *)objects count:(NSUInteger)cnt &#123;</span><br><span class="line">    </span><br><span class="line">    id instance = nil;</span><br><span class="line">    </span><br><span class="line">    @try &#123;</span><br><span class="line">        instance = [self AvoidCrashArrayWithObjects:objects count:cnt];</span><br><span class="line">    &#125;</span><br><span class="line">    @catch (NSException *exception) &#123;</span><br><span class="line">        </span><br><span class="line">        NSString *defaultToDo = @&quot;AvoidCrash default is to remove nil object and instance a array.&quot;;</span><br><span class="line">        [AvoidCrash noteErrorWithException:exception defaultToDo:defaultToDo];</span><br><span class="line">        </span><br><span class="line">        //以下是对错误数据的处理，把为nil的数据去掉,然后初始化数组</span><br><span class="line">        NSInteger newObjsIndex = 0;</span><br><span class="line">        id  _Nonnull __unsafe_unretained newObjects[cnt];</span><br><span class="line">        </span><br><span class="line">        for (int i = 0; i &lt; cnt; i++) &#123;</span><br><span class="line">            if (objects[i] != nil) &#123;</span><br><span class="line">                newObjects[newObjsIndex] = objects[i];</span><br><span class="line">                newObjsIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        instance = [self AvoidCrashArrayWithObjects:newObjects count:newObjsIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    @finally &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在自己写的函数中，如果出现异常，先将<strong>异常的具体信息</strong>抛出去，然后将<strong>NSArray中的nil移除得到新的数组</strong>。</p></li><li><p>外部接收到抛出的异常信息，整理。例如：获取具体的崩溃在哪个类的哪个方法中（如下）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//堆栈数据</span><br><span class="line">NSArray *callStackSymbolsArr = [NSThread callStackSymbols];</span><br><span class="line">    </span><br><span class="line">//获取在哪个类的哪个方法中实例化的数组  字符串格式 -[类名 方法名]  或者 +[类名 方法名]</span><br><span class="line">NSString *mainCallStackSymbolMsg = [AvoidCrash getMainCallStackSymbolMessageWithCallStackSymbols:callStackSymbolsArr];</span><br></pre></td></tr></table></figure><ul><li>最后将整理好的崩溃信息使用通知的形式传递出去，给具体的函数进行Bug上传服务器等操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将错误信息放在字典里，用通知的形式发送出去</span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:AvoidCrashNotification object:nil userInfo:errorInfoDic];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-4、想法"><a href="#1-4、想法" class="headerlink" title="1.4、想法"></a>1.4、想法</h3><p>个人觉得：首先肯定作者<a href="https://www.jianshu.com/u/80fadb71940d" target="_blank" rel="noopener">chenfanfang</a>的想法与执行力，AvoidCrash也非常的好用，但是它是针对特定的崩溃进行特定的操作，让人感觉依旧有未列举出来的地方。例如不在主线程上处理UI奔溃无法捕获异常。勿喷！！！</p><h2 id="二、AA"><a href="#二、AA" class="headerlink" title="二、AA"></a>二、AA</h2><p><a href="https://www.cnblogs.com/lizilong/p/7908955.html" target="_blank" rel="noopener">ios项目如何避免crash</a><br>—<a href="https://github.com/lizilong1989/LongCrash" target="_blank" rel="noopener">LongCrash</a></p><p><a href="http://blog.csdn.net/qihongru1227/article/details/75090361" target="_blank" rel="noopener">IOS 防止崩溃 Crash 组件</a><br>—<a href="https://github.com/hongruqi/SafeGuard" target="_blank" rel="noopener">SafeGuard</a></p><p><a href="http://blog.csdn.net/qq_27873515/article/details/72420592" target="_blank" rel="noopener">iOS闪退问题，避免闪退看我就足够了， try catch等方法</a></p><hr><h1 id="Part-Three-崩溃发生后Bug收集处理"><a href="#Part-Three-崩溃发生后Bug收集处理" class="headerlink" title="Part Three - 崩溃发生后Bug收集处理"></a>Part Three - 崩溃发生后Bug收集处理</h1><hr><h2 id="一、后期收集Bugly"><a href="#一、后期收集Bugly" class="headerlink" title="一、后期收集Bugly"></a>一、后期收集Bugly</h2><p><a href="https://bugly.qq.com/v2/" target="_blank" rel="noopener">Bugly官网</a></p><h2 id="二、热修复JSPatch"><a href="#二、热修复JSPatch" class="headerlink" title="二、热修复JSPatch"></a>二、热修复JSPatch</h2><p>搞不懂Apple审核。视情况使用！！</p><hr><blockquote><h4 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h4><p><strong>欢迎指正补充，可联系<a href="lionsom_lin@qq.com">lionsom_lin@qq.com</a></strong><br><strong>原文地址：<a href="http://lionsom.com/2018/03/20/避免程序崩溃iOS探索/" target="_blank" rel="noopener">避免程序崩溃iOS探索</a></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Part ONE - 崩溃发生前之数据&lt;code&gt;&amp;lt;null&amp;gt;&lt;/code&gt;处理&lt;/li&gt;
&lt;li&gt;Part Two - 崩溃发生时Runtime避免崩溃&lt;/li&gt;
&lt;li&gt;Part Three - 崩溃发生后Bug收集处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS程序崩溃" scheme="http://yoursite.com/categories/iOS%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="崩溃" scheme="http://yoursite.com/tags/%E5%B4%A9%E6%BA%83/"/>
    
  </entry>
  
  <entry>
    <title>Mac+Hexo+github搭建myblog完整版</title>
    <link href="http://yoursite.com/2018/03/16/Hexo-github%E6%90%AD%E5%BB%BAmyblog%E5%AE%8C%E6%95%B4%E7%89%88/"/>
    <id>http://yoursite.com/2018/03/16/Hexo-github搭建myblog完整版/</id>
    <published>2018-03-16T07:34:48.000Z</published>
    <updated>2018-03-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>Part One - Hexo本地搭建运行</li><li>Part Two - github仓库创建和配置</li><li>Part Three - 本地Hexo关联github</li><li>Part Four - 绑定域名并设置域名解析</li><li>Part Five - Hexo日常操作</li><li>Part Six - Hexo主题更换</li><li>Part Seven - 实战中的一些问题</li></ul><a id="more"></a><hr><h1 id="Part-One-Hexo本地搭建运行"><a href="#Part-One-Hexo本地搭建运行" class="headerlink" title="Part One - Hexo本地搭建运行"></a>Part One - Hexo本地搭建运行</h1><hr><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a><br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a></p><h3 id="1-1、Hexo安装的前提"><a href="#1-1、Hexo安装的前提" class="headerlink" title="1.1、Hexo安装的前提"></a>1.1、Hexo安装的前提</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 需要先安装 按照流程安装即可！</li><li>npm      与Nodejs一起安装完成，不需要单独安装！</li><li><a href="https://git-scm.com" target="_blank" rel="noopener">Git</a>     Mac系统自带无需安装</li></ul><h3 id="1-2、安装-Hexo"><a href="#1-2、安装-Hexo" class="headerlink" title="1.2、安装 Hexo"></a>1.2、安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>注意：此处可能需要root权限</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---切换root---</span><br><span class="line">LionsomMBP:~ lionsom$ sudo -i </span><br><span class="line"></span><br><span class="line">---切换lionsom普通用户---</span><br><span class="line">LionsomMBP:~ root# su - lionsom</span><br></pre></td></tr></table></figure><p><img src="/assets/img/Hexo-github搭建myblog完整版/001.jpg" alt="npm install -g hexo-cli"></p><h3 id="1-3、安装Hexo完成，则开始初始化hexo"><a href="#1-3、安装Hexo完成，则开始初始化hexo" class="headerlink" title="1.3、安装Hexo完成，则开始初始化hexo"></a>1.3、安装Hexo完成，则开始初始化hexo</h3><ul><li>创建一个文件夹myblog</li><li>进入myblog</li><li><p>hexo init<br><img src="/assets/img/Hexo-github搭建myblog完整版/002.jpg" alt="hexo init"></p></li><li><p>文件目录结构<br><img src="/assets/img/Hexo-github搭建myblog完整版/myblog目录.jpg" alt="myblog生成点文件目录"></p></li></ul><h3 id="1-4、依赖包与插件的安装"><a href="#1-4、依赖包与插件的安装" class="headerlink" title="1.4、依赖包与插件的安装"></a>1.4、依赖包与插件的安装</h3><ul><li>执行以下命令，进行依赖包的安装，<ul><li>node_modules: 关联保存了将会使用到的hexo依赖包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>![依赖包安装](/assets/img/Hexo-github搭建myblog完整版/依赖包安装.jpg)</code></pre><ul><li><p>安装相关插件</p><ul><li><p><strong>重要：安装便于自动部署到Github上的插件</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>安装atom生成插件，便于感兴趣的小伙伴们订阅</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>安装博客首页生成插件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure></li><li><p>安装归档生成插件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure></li><li><p>安装tag生成插件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-tag --save</span><br></pre></td></tr></table></figure></li><li><p>安装category生成插件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-category --save</span><br></pre></td></tr></table></figure></li><li><p>安装Sitemap文件生成插件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-5、本地启动Hexo"><a href="#1-5、本地启动Hexo" class="headerlink" title="1.5、本地启动Hexo"></a>1.5、本地启动Hexo</h3><h4 id="操作指令一览表"><a href="#操作指令一览表" class="headerlink" title="操作指令一览表"></a>操作指令一览表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean      #清理缓存</span><br><span class="line">$ hexo generate   #生成静态文件</span><br><span class="line">$ hexo server  #启动本地服务器</span><br><span class="line">或者</span><br><span class="line">$ hexo clean      #清理缓存</span><br><span class="line">$ hexo g          #生成静态文件</span><br><span class="line">$ hexo s          #启动本地服务器</span><br></pre></td></tr></table></figure><ul><li>前往myblog目录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;test&quot;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/assets/img/Hexo-github搭建myblog完整版/创建新blog.jpg" alt="创建新blog"></p><ul><li><p>在生成路径下查看<br><img src="/assets/img/Hexo-github搭建myblog完整版/新blog路径.jpg" alt="路径"></p></li><li><p>Hexo本地生成</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>  <img src="/assets/img/Hexo-github搭建myblog完整版/Hexo本地generate.jpg" alt="Hexo本地生成"></p></li><li><p>Hexo本地运行</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><img src="/assets/img/Hexo-github搭建myblog完整版/Hexo本地运行.jpg" alt="hexo本地运行"></p><p> <img src="/assets/img/Hexo-github搭建myblog完整版/Hexo本地运行效果图.jpg" alt="Hexo本地运行效果图"></p><hr><h1 id="Part-Two-github仓库创建和配置"><a href="#Part-Two-github仓库创建和配置" class="headerlink" title="Part Two - github仓库创建和配置"></a>Part Two - github仓库创建和配置</h1><hr><h3 id="2-1、github仓库创建"><a href="#2-1、github仓库创建" class="headerlink" title="2.1、github仓库创建"></a>2.1、github仓库创建</h3><ul><li>仓库名字必须是<strong>『username.github.io』</strong>格式；</li><li>创建GitHub Pages<br><img src="/assets/img/Hexo-github搭建myblog完整版/GitHub_Pages创建.jpg" alt="GitHub Pages创建"></li></ul><h3 id="2-2、配置git"><a href="#2-2、配置git" class="headerlink" title="2.2、配置git"></a>2.2、配置git</h3><ul><li><p>设置用户名和邮箱</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email &quot;lionsom_lin@qq.com&quot;</span><br><span class="line">$ git config --global user.name &quot;lionsom&quot;</span><br></pre></td></tr></table></figure></li><li><p>根据邮箱生成密钥 - 如下图，如无特殊需求</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;lionsom_lin@qq.com&quot;</span><br></pre></td></tr></table></figure><p>  <img src="/assets/img/Hexo-github搭建myblog完整版/密钥生成1.jpg" alt="生成密钥具体操作"></p></li><li><p>查看生成的密钥-在隐藏文件 <strong>.ssh</strong> 中，其中<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥<br><img src="/assets/img/Hexo-github搭建myblog完整版/生成的密钥.jpg" alt="密钥生成路径"></p></li><li><p><code>ssh-agent</code>代管理git<strong>私钥</strong></p><ul><li><code>ssh-agent</code>是一个密钥管理器，运行<code>ssh-agent</code>以后，使用<code>ssh-add</code>将私钥交给<code>ssh-agent</code>保管，其他程序需要身份验证的时候可以将验证申请交给<code>ssh-agent</code>来完成整个认证过程。 </li></ul></li><li><p>添加<code>SSH Key</code>到<code>ssh-agent</code></p><ul><li><p>执行命令 获取 <code>agent pid 59566</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eval $(ssh-agent -s)</span><br></pre></td></tr></table></figure></li><li><p>添加<code>id_rsa</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add /Users/lionsom/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将生成的公钥 配置到 github</p><ul><li>记事本打开<code>id_rsa.pub</code>密钥，复制内容，前往github账户中心<code>Settings</code>,进行如下图操作。<br><img src="/assets/img/Hexo-github搭建myblog完整版/公钥添加到github.jpg" alt="公钥添加"></li></ul></li><li><p>验证<strong>SSH</strong>是否配置完成</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>  成功则出现</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You&apos;ve successfully authenticated, but github does not provide shell access.</span><br></pre></td></tr></table></figure><p>  如图：<br><img src="/assets/img/Hexo-github搭建myblog完整版/密钥添加.jpg" alt="添加是否完成"></p></li></ul><hr><h1 id="Part-Three-本地Hexo关联github"><a href="#Part-Three-本地Hexo关联github" class="headerlink" title="Part Three - 本地Hexo关联github"></a>Part Three - 本地Hexo关联github</h1><hr><h3 id="3-1、配置-config-yml"><a href="#3-1、配置-config-yml" class="headerlink" title="3.1、配置_config.yml"></a>3.1、配置<strong>_config.yml</strong></h3><p><img src="/assets/img/Hexo-github搭建myblog完整版/config.yml.jpg" alt="具体配置"></p><h3 id="3-2、前往Hexo本地目录生成静态网页并Deploy到github"><a href="#3-2、前往Hexo本地目录生成静态网页并Deploy到github" class="headerlink" title="3.2、前往Hexo本地目录生成静态网页并Deploy到github"></a>3.2、前往Hexo本地目录生成静态网页并Deploy到github</h3><ul><li>确认依赖包和插件安装完成，特别是<code>hexo-deployer-git</code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>指令操作</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  #清理缓存</span><br><span class="line">$ hexo g      #生成静态文件</span><br><span class="line">$ hexo d      #部署</span><br><span class="line">或 $ hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>实际操作图</p><ul><li>清理缓存+重新生成静态文件<br><img src="/assets/img/Hexo-github搭建myblog完整版/clean+generate.jpg" alt="清理缓存+重新生成静态文件"></li><li>部署到github<br><img src="/assets/img/Hexo-github搭建myblog完整版/deploy.jpg" alt="部署到github"></li></ul></li><li><p>输入<a href="https://lionsom.github.io" target="_blank" rel="noopener">https://lionsom.github.io</a>查看<br>  <img src="/assets/img/Hexo-github搭建myblog完整版/部署成功.jpg" alt="部署成功"></p></li></ul><hr><hr><h1 id="以上就能实现基本的个人blog"><a href="#以上就能实现基本的个人blog" class="headerlink" title="以上就能实现基本的个人blog"></a>以上就能实现基本的个人blog</h1><hr><hr><h4 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h4><ul><li><a href="https://www.jianshu.com/p/148f8d803e80" target="_blank" rel="noopener">我特么搭个博客容易么[Hexo+githubPages]（一）</a></li><li><a href="https://www.jianshu.com/p/f47ac6081f30" target="_blank" rel="noopener">我特么搭个博客容易么[Hexo+githubPages]（二）</a></li><li><a href="https://www.jianshu.com/p/fae0d7ecc486" target="_blank" rel="noopener">我特么搭个博客容易么[Hexo+githubPages]（三）</a></li><li><a href="https://www.jianshu.com/p/a1778c515a33" target="_blank" rel="noopener">使用Hexo在GitHub Pages上搭建部署免费的个人博客网站（上：GitHub搭建）——最详细全面解读教程（没有之一）</a></li><li><a href="https://www.jianshu.com/p/c9295bacd98b" target="_blank" rel="noopener">使用Hexo在GitHub Pages上搭建部署免费的个人博客网站（下：Hexo部署）——最详细全面解读教程（没有之一）</a></li></ul><hr><h1 id="Part-Four-绑定域名并设置域名解析"><a href="#Part-Four-绑定域名并设置域名解析" class="headerlink" title="Part Four - 绑定域名并设置域名解析"></a>Part Four - 绑定域名并设置域名解析</h1><hr><blockquote><p><strong>GitHub为我们每个注册的用户提供了一个唯一的 <code>username.github.io</code> 网址，GitHub服务器会帮我们托管这个 <code>username.github.io</code> 所用到的全部代码，自动运行，所以我们就不需要购买服务器或者云主机来自己运行了。但是，我们之所以购买域名，就是不想总是通过 <code>username.github.io</code> 来访问我们的个人网站，而是希望通过自己的独立域名来访问。把 <code>username.github.io</code> 和自己购买的域名相关联</strong></p></blockquote><h2 id="方法一：（不推荐）"><a href="#方法一：（不推荐）" class="headerlink" title="方法一：（不推荐）"></a>方法一：（不推荐）</h2><h4 id="1、进入github项目中的Settings中，找到Github-Pages中的Custom-domain，输入自己的域名，点击Save即可。"><a href="#1、进入github项目中的Settings中，找到Github-Pages中的Custom-domain，输入自己的域名，点击Save即可。" class="headerlink" title="1、进入github项目中的Settings中，找到Github Pages中的Custom domain，输入自己的域名，点击Save即可。"></a>1、进入github项目中的<code>Settings</code>中，找到<code>Github Pages</code>中的<code>Custom domain</code>，输入自己的域名，点击Save即可。</h4><p><img src="/assets/img/Hexo-github搭建myblog完整版/github域名添加.jpg" alt="github域名添加"></p><h4 id="2、查看项目中多了-CNAME-文件"><a href="#2、查看项目中多了-CNAME-文件" class="headerlink" title="2、查看项目中多了 CNAME 文件"></a>2、查看项目中多了 <code>CNAME</code> 文件</h4><p><img src="/assets/img/Hexo-github搭建myblog完整版/github域名添加成功.jpg" alt="github域名添加成功"></p><h4 id="3、域名解析"><a href="#3、域名解析" class="headerlink" title="3、域名解析"></a>3、域名解析</h4><ul><li>记录类型：CNAME，主机记录：@，记录值一定要是 username.github.io，TTL：一般都是10分钟。<br><img src="/assets/img/Hexo-github搭建myblog完整版/域名解析设置.jpg" alt="域名解析"></li></ul><h4 id="4、检测是否绑定成功"><a href="#4、检测是否绑定成功" class="headerlink" title="4、检测是否绑定成功"></a>4、检测是否绑定成功</h4><p><img src="/assets/img/Hexo-github搭建myblog完整版/域名解析成功.jpg" alt="域名解析成功"></p><h4 id="5、此方法弊端"><a href="#5、此方法弊端" class="headerlink" title="5、此方法弊端"></a>5、此方法弊端</h4><p>如果重新generate并deploy，域名与<code>username.github.io</code>关联失效，需要重新设置一遍。</p><h2 id="方式二：（推荐）"><a href="#方式二：（推荐）" class="headerlink" title="方式二：（推荐）"></a>方式二：（推荐）</h2><h4 id="1、在本地hexo根目录-》source中创建文件『CNAME』，写入域名lionsom-com"><a href="#1、在本地hexo根目录-》source中创建文件『CNAME』，写入域名lionsom-com" class="headerlink" title="1、在本地hexo根目录-》source中创建文件『CNAME』，写入域名lionsom.com"></a>1、在本地hexo根目录-》source中创建文件『CNAME』，写入域名<code>lionsom.com</code></h4><p><img src="/assets/img/Hexo-github搭建myblog完整版/本地创建CNAME文件.jpg" alt="操作如图"></p><h4 id="2、重新部署一次，查看结果"><a href="#2、重新部署一次，查看结果" class="headerlink" title="2、重新部署一次，查看结果"></a>2、重新部署一次，查看结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  #清理缓存</span><br><span class="line">$ hexo g      #生成静态文件</span><br><span class="line">$ hexo d      #部署</span><br></pre></td></tr></table></figure><p><img src="/assets/img/Hexo-github搭建myblog完整版/github多出CNAME文件.jpg" alt="多出CNAME文件"></p><p><img src="/assets/img/Hexo-github搭建myblog完整版/域名解析成功2.jpg" alt="解析成功"></p><h4 id="域名绑定完成！！"><a href="#域名绑定完成！！" class="headerlink" title="域名绑定完成！！"></a>域名绑定完成！！</h4><hr><h1 id="Part-Five-Hexo日常操作"><a href="#Part-Five-Hexo日常操作" class="headerlink" title="Part Five - Hexo日常操作"></a>Part Five - Hexo日常操作</h1><hr><h3 id="官网-1"><a href="#官网-1" class="headerlink" title="官网"></a>官网</h3><p><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">hexo官网使用-基本操作</a></p><h3 id="5-1、进行常用的配置"><a href="#5-1、进行常用的配置" class="headerlink" title="5.1、进行常用的配置"></a>5.1、进行常用的配置</h3><h4 id="5-1-1、layout设置"><a href="#5-1-1、layout设置" class="headerlink" title="5.1.1、layout设置"></a>5.1.1、layout设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，<br>默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h4 id="5-1-2、文件名称设置"><a href="#5-1-2、文件名称设置" class="headerlink" title="5.1.2、文件名称设置"></a>5.1.2、文件名称设置</h4><p>Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Writing</span><br><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h4 id="5-1-3、模版（Scaffold）设置"><a href="#5-1-3、模版（Scaffold）设置" class="headerlink" title="5.1.3、模版（Scaffold）设置"></a>5.1.3、模版（Scaffold）设置</h4><p><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">hexo官网使用-Front-matter</a></p><p><img src="/assets/img/Hexo-github搭建myblog完整版/front-matter.jpg" alt="front-matter"></p><p><img src="/assets/img/Hexo-github搭建myblog完整版/Scaffold设置.jpg" alt="Scaffold设置"></p><h4 id="5-1-4、资源设置-图片等"><a href="#5-1-4、资源设置-图片等" class="headerlink" title="5.1.4、资源设置-图片等"></a>5.1.4、资源设置-图片等</h4><p><a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">hexo官网使用-资源文件夹</a></p><blockquote><p>文章资源文件夹</p><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p><strong>使用相对路径进行资源引用：<code>./XXXX.jpg</code></strong></p><h3 id="5-2、创建新blog"><a href="#5-2、创建新blog" class="headerlink" title="5.2、创建新blog"></a>5.2、创建新blog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new blog_name</span><br></pre></td></tr></table></figure><p>生成两个文件：blog_name.md 和 blog_name资源文件夹</p><hr><h1 id="Part-Six-Hexo主题更换"><a href="#Part-Six-Hexo主题更换" class="headerlink" title="Part Six - Hexo主题更换"></a>Part Six - Hexo主题更换</h1><hr><h3 id="6-1、主题设置"><a href="#6-1、主题设置" class="headerlink" title="6.1、主题设置"></a>6.1、主题设置</h3><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">github主题列表地址</a></p><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a></p><h4 id="6-1-1、将主题clone到themes文件夹中"><a href="#6-1-1、将主题clone到themes文件夹中" class="headerlink" title="6.1.1、将主题clone到themes文件夹中"></a>6.1.1、将主题clone到themes文件夹中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LionsomMBP:myblog lionsom$ cd themes/</span><br><span class="line">LionsomMBP:themes lionsom$ git clone https://github.com/litten/hexo-theme-yilia.git</span><br></pre></td></tr></table></figure><h4 id="6-1-2、修改Hexo的-config-yml文件配置"><a href="#6-1-2、修改Hexo的-config-yml文件配置" class="headerlink" title="6.1.2、修改Hexo的_config.yml文件配置"></a>6.1.2、修改Hexo的_config.yml文件配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: hexo-theme-yilia</span><br></pre></td></tr></table></figure><h4 id="6-1-3、重新加载"><a href="#6-1-3、重新加载" class="headerlink" title="6.1.3、重新加载"></a>6.1.3、重新加载</h4><p><img src="/assets/img/Hexo-github搭建myblog完整版/主题更换成功.jpg" alt="显示主题效果"></p><h3 id="6-2、yilia主题内部设置"><a href="#6-2、yilia主题内部设置" class="headerlink" title="6.2、yilia主题内部设置"></a>6.2、yilia主题内部设置</h3><ul><li><p>直接参考yilia原版配置，参考配置即可！！</p><ul><li><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia 官网</a></p></li><li><p><a href="https://github.com/litten/BlogBackup" target="_blank" rel="noopener">yilia-BlogBackup 样例</a></p></li></ul></li><li><p>具体配置中遇到个小麻烦-目录显示不出来<br>  <img src="/assets/img/Hexo-github搭建myblog完整版/yilia配置.jpg" alt="目录显示不出来"></p><ul><li>严格按照上述配置即可！</li></ul></li><li><p>yilia内部资源路径的问题</p><ul><li>这里的路径是Hexo根目录下source下点资源，</li><li><p>完整的路径是指Hexo/source/assets/img/wechatpay.jpg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#你的头像url</span><br><span class="line">avatar: /assets/img/wechatpay.jpg</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="Part-Seven-实战中的一些问题"><a href="#Part-Seven-实战中的一些问题" class="headerlink" title="Part Seven - 实战中的一些问题"></a>Part Seven - 实战中的一些问题</h1><hr><h3 id="7-1、图片资源加载不出来的问题"><a href="#7-1、图片资源加载不出来的问题" class="headerlink" title="7.1、图片资源加载不出来的问题"></a>7.1、图片资源加载不出来的问题</h3><p><img src="/assets/img/Hexo-github搭建myblog完整版/图片加载异常1.jpg" alt=""></p><p><img src="/assets/img/Hexo-github搭建myblog完整版/图片加载异常2.jpg" alt=""></p><p>根据上图点结论，所以，资源路径不推荐5.1.4所推荐的设置，依旧推荐在</p><p><img src="/assets/img/Hexo-github搭建myblog完整版/图片推荐路径.jpg" alt="推荐路径"></p><p><strong>使用路径 /assets/img/myhead.jpg</strong></p><h3 id="7-2、主页面预览，不显示全部内容"><a href="#7-2、主页面预览，不显示全部内容" class="headerlink" title="7.2、主页面预览，不显示全部内容"></a>7.2、主页面预览，不显示全部内容</h3><p><img src="/assets/img/Hexo-github搭建myblog完整版/显示more.jpg" alt="推荐路径"></p><p>我们可以这样解决，打开一篇文章，添加<code>&lt;!--more--&gt;</code>即可！！！</p><h3 id="7-3、设置网页浏览次数"><a href="#7-3、设置网页浏览次数" class="headerlink" title="7.3、设置网页浏览次数"></a>7.3、设置网页浏览次数</h3><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a></p><blockquote><p>如果你是用的hexo，打开<code>themes/你的主题/layout/_partial/footer.ejs</code>添加即可。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 脚本</span><br><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"># 标签</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p><img src="/assets/img/Hexo-github搭建myblog完整版/不蒜子设置.jpg" alt="设置"></p><hr><blockquote><h4 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h4><p><strong>欢迎指正补充，可联系<a href="lionsom_lin@qq.com">lionsom_lin@qq.com</a></strong><br><strong>原文地址：<a href="http://lionsom.com/2018/03/16/Hexo-github搭建myblog完整版/" target="_blank" rel="noopener">Mac+Hexo+github搭建myblog完整版</a></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Part One - Hexo本地搭建运行&lt;/li&gt;
&lt;li&gt;Part Two - github仓库创建和配置&lt;/li&gt;
&lt;li&gt;Part Three - 本地Hexo关联github&lt;/li&gt;
&lt;li&gt;Part Four - 绑定域名并设置域名解析&lt;/li&gt;
&lt;li&gt;Part Five - Hexo日常操作&lt;/li&gt;
&lt;li&gt;Part Six - Hexo主题更换&lt;/li&gt;
&lt;li&gt;Part Seven - 实战中的一些问题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="myblog搭建" scheme="http://yoursite.com/categories/myblog%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
</feed>
